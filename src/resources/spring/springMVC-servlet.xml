<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

	<!-- 注解扫描包 -->
	<context:component-scan base-package="com" />

	<!-- 开启注解 -->
	<mvc:annotation-driven />

	<!-- 静态资源的访问 -->
	<mvc:resources location="/css/" mapping="/css/**" />
	<mvc:resources location="/js/" mapping="/js/**" />
	<mvc:resources location="/images/" mapping="/images/**" />
	<mvc:resources location="/plugin/" mapping="/plugin/**" />
	<mvc:resources location="/upload/" mapping="/upload/**" />
	<mvc:resources location="/uploadify/" mapping="/uploadify/**" />
	<mvc:resources location="/uploadFile/" mapping="/uploadFile/**" />
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>
   
     
	
	<!-- 返回JSON模版 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>
	<!-- 注意：FreeMarker与SpringMVC集成时，其配置一定要放在SpringMVC的配置之前 -->
	<!-- 否则：在访问"/getUser"时服务器就会报告[HTTP Status 404 - /WEB-INF/jsp/myfree.jsp] -->
	<bean id="freemarkerConfig"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<!-- 指定FreeMarker模板文件目录 -->
		<property name="templateLoaderPath" value="/WEB-INF/ftl/" />
		<!-- 编码设置 -->
		<property name="freemarkerSettings">
            <props>
                <prop key="datetime_format">MM/dd/yyyy</prop>
                <prop key="number_format">0.######</prop>
                <prop key="template_update_delay">0</prop>  
		        <prop key="default_encoding">UTF-8</prop>  
		        <prop key="locale">zh_CN</prop> 
		        <prop key="url_escaping_charset">UTF-8</prop>
		        <prop key="boolean_format">true,false</prop>
		        <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="date_format">yyyy-MM-dd</prop>
                <prop key="time_format">HH:mm:ss</prop>
                <prop key="whitespace_stripping">true</prop>
            </props>
		</property>
	</bean>
    <!-- 定义视图解析器 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="exposeSpringMacroHelpers" value="true"/>
        <property name="requestContextAttribute" value="rc"/>
        <property name="prefix" value="/"/>
        <property name="suffix" value=".ftl"/>
        <property name="contentType" value="text/html;charset=UTF-8"></property>
    </bean>
    
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="stringHttpMessageConverter" />
                <!-- 
                <ref bean="jsonHttpMessageConverter" />
                 -->
            </list>
        </property>
    </bean>

	<bean id="stringHttpMessageConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	

		
	<!--配置拦截器, 多个拦截器,顺序执行 -->
	<mvc:interceptors>
		<!-- <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
			<mvc:interceptor>
				<mvc:mapping path="/**"/>  
					定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 
			        匹配的是url路径， 如果不配置或/**,将拦截所有的Controller  
				<bean class="com.uws.interceptor.AuthenticationIntercetor">
					<property name="allowUrl">  
						<list>  
							<value>/login.do</value>
						</list>  
					</property> 
				</bean>
	   		当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法  
			</mvc:interceptor> -->
		
		<mvc:interceptor>   
	    	<mvc:mapping path="/**"/> <!-- 所有请求都要拦截 -->
	    	<mvc:exclude-mapping path="/login"/> <!-- 进入登陆页面的请求 -->
	    	<mvc:exclude-mapping path="/verify"/> <!-- 生成验证码的请求 -->
	    	<mvc:exclude-mapping path="/dologin"/> <!-- 登陆验证的请求,否则就死循环了 -->
	    	<mvc:exclude-mapping path="/css/**"/> <!-- 登陆验证的请求,否则就死循环了 ,/js/**,/images/**,/plugin/**,/uploadify/**"-->
	    	<mvc:exclude-mapping path="/js/**"/>
	    	<mvc:exclude-mapping path="/images/**"/>
	    	<mvc:exclude-mapping path="/plugin/**"/>
	    	<mvc:exclude-mapping path="/uploadify/**"/>
	    	<mvc:exclude-mapping path="/uploadFile/**"/>
	    	
	    	<bean class="com.uws.interceptor.LoginInterceptor"></bean>   
	  	</mvc:interceptor>
	</mvc:interceptors>
	
	
</beans>